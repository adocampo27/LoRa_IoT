#include "Arduino.h"
#include "LoRaWan_APP.h"
#include <Wire.h>
#include <BH1750.h>
#include <DHT.h>

// -----------------------------------
// Pines y sensores
// -----------------------------------
#define DHTPIN 5        // DHT11 conectado al GPIO5
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

BH1750 lightMeter;

// -----------------------------------
// Variables de sensor
// -----------------------------------
float lux = 0;
float temp = 0;
float hum = 0;
int tipoSensor = 0;

// -----------------------------------
// Low Power Sleep
// -----------------------------------
TimerEvent_t sleepTimer;
bool sleepTimerExpired;

static void wakeUp() {
  sleepTimerExpired = true;
}

static void lowPowerSleep(uint32_t sleeptime) {
  sleepTimerExpired = false;
  TimerInit(&sleepTimer, &wakeUp);
  TimerSetValue(&sleepTimer, sleeptime);
  TimerStart(&sleepTimer);
  while (!sleepTimerExpired) lowPowerHandler();
  TimerStop(&sleepTimer);
}

// -----------------------------------
// LoRa
// -----------------------------------
#define RF_FREQUENCY 915000000
#define TX_OUTPUT_POWER 20
#define LORA_BANDWIDTH 0
#define LORA_SPREADING_FACTOR 7
#define LORA_CODINGRATE 1
#define LORA_PREAMBLE_LENGTH 8
#define LORA_FIX_LENGTH_PAYLOAD_ON false
#define LORA_IQ_INVERSION_ON false
#define BUFFER_SIZE 50

char txpacket[BUFFER_SIZE];
static RadioEvents_t RadioEvents;

// -----------------------------------
// Setup
// -----------------------------------
#define SLEEP_TIME 30000  // 30 segundos

void setup() {
  Serial.begin(115200);
  
  // Inicializar sensores
  Wire.begin();
  lightMeter.begin(BH1750::CONTINUOUS_HIGH_RES_MODE);
  dht.begin();

  Serial.println("Sensores inicializados");

  // Inicializar LoRa
  LoRa_init();
  Serial.println("LoRa inicializado");
}

// -----------------------------------
// Loop
// -----------------------------------
void loop() {
  switch(tipoSensor) {
    case 0: // BH1750
      lux = lightMeter.readLightLevel();
      if (isnan(lux)) lux = -1;
      enviar_LoRa("lux_sensor", "lux", lux);
      tipoSensor++;
      break;
    case 1: // DHT11 temperatura
      delay(1000); // Esperar un segundo antes de leer DHT11
      temp = dht.readTemperature();
      if (isnan(temp)) temp = -1;
      enviar_LoRa("temp_sensor", "temp", temp);
      tipoSensor++;
      break;
    case 2: // DHT11 humedad
      delay(1000); // Esperar un segundo antes de leer DHT11
      hum = dht.readHumidity();
      if (isnan(hum)) hum = -1;
      enviar_LoRa("hum_sensor", "hum", hum);
      tipoSensor = 0;
      break;
    default:
      tipoSensor = 0;
  }

  lowPowerSleep(SLEEP_TIME);
}

// -----------------------------------
// Funciones LoRa
// -----------------------------------
void LoRa_init() {
  Radio.Init(&RadioEvents);
  Radio.SetChannel(RF_FREQUENCY);
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
                    LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                    LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                    true, 0, 0, LORA_IQ_INVERSION_ON, 3000);
}

void enviar_LoRa(String id_variable, String id_sensor, float valor_sensado) {
  String msg = "";
  msg.concat(id_variable);
  msg.concat('/');
  msg.concat("node_01"); // ID del nodo
  msg.concat('/');
  msg.concat(id_sensor);
  msg.concat('/');
  
  msg.concat(String(valor_sensado));
  msg.concat('/');
  Serial.println("Enviado: " + msg);
  msg.toCharArray(txpacket, BUFFER_SIZE);
  Radio.Send((uint8_t*)txpacket, strlen(txpacket));
}
